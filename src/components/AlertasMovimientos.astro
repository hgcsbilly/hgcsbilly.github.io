---
import { useEffect, useState } from 'react';

const variacion = 5;
const variacion_100 = 7;
const variacionfast = 2;

const wsUrl = 'wss://fstream.binance.com/ws';
const ticks = [];

function humanFormat(volume) {
  const units = ['', 'K', 'M', 'G', 'T', 'P'];
  let magnitude = 0;

  while (Math.abs(volume) >= 1000) {
    magnitude++;
    volume /= 1000.0;
  }

  return volume.toFixed(2) + units[magnitude];
}

function calcularVariacion(inicial, final) {
  return ((final - inicial) / inicial) * 100;
}

function AlertasMovimientos() {
  const [alerts, setAlerts] = useState([]);
  const [klines, setKlines] = useState({});

  useEffect(() => {
    const ws = new WebSocket(wsUrl);

    ws.onopen = () => {
      ws.send(
        JSON.stringify({
          method: 'SUBSCRIBE',
          params: ['!ticker@arr'],
          id: 1,
        })
      );
    };

    ws.onmessage = (event) => {
      const data = JSON.parse(event.data);

      if (Array.isArray(data)) {
        data.forEach((tick) => {
          if (tick.s.endsWith('USDT')) {
            ticks.push(tick.s);
          }
        });
      } else if (data.k) {
        const { s: symbol, k: kline } = data;
        setKlines((prevKlines) => ({
          ...prevKlines,
          [symbol]: [...(prevKlines[symbol] || []), kline],
        }));
      }
    };

    return () => ws.close();
  }, []);

  useEffect(() => {
    const checkVariations = () => {
      ticks.forEach((tick) => {
        const tickKlines = klines[tick];

        if (tickKlines && tickKlines.length > 0) {
          const initialPrice = parseFloat(tickKlines[0].c);
          const finalPrice = parseFloat(tickKlines[tickKlines.length - 1].c);

          const variation = calcularVariacion(initialPrice, finalPrice);

          if (variation >= variacion) {
            setAlerts((prevAlerts) => [
              ...prevAlerts,
              `LONG: ${tick} - Variación: ${variation.toFixed(2)}%`,
            ]);
          } else if (variation <= -variacion) {
            setAlerts((prevAlerts) => [
              ...prevAlerts,
              `SHORT: ${tick} - Variación: ${variation.toFixed(2)}%`,
            ]);
          }

          if (tickKlines.length >= 3) {
            const initialFastPrice = parseFloat(tickKlines[tickKlines.length - 3].c);
            const finalFastPrice = parseFloat(tickKlines[tickKlines.length - 1].c);
            const fastVariation = calcularVariacion(initialFastPrice, finalFastPrice);

            if (fastVariation >= variacionfast) {
              setAlerts((prevAlerts) => [
                ...prevAlerts,
                `FAST: ${tick} - Variación: ${fastVariation.toFixed(2)}%`,
              ]);
            }
          }
        }
      });
    };

    const interval = setInterval(checkVariations, 30000);

    return () => clearInterval(interval);
  }, [klines]);

  return (
    <div>
      <h1>Alertas de Movimientos</h1>
      <ul>
        {alerts.map((alert, index) => (
          <li key={index}>{alert}</li>
        ))}
      </ul>
    </div>
  );
}

export default AlertasMovimientos;
---
<AlertasMovimientos />
